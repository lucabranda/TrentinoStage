/**
 * Trentino Stage API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { ApiProfilesGetGet200Response } from '../model/apiProfilesGetGet200Response';
import { ApiProfilesGetGet401Response } from '../model/apiProfilesGetGet401Response';
import { ApiProfilesInviteGet200Response } from '../model/apiProfilesInviteGet200Response';
import { ApiProfilesInviteGet400Response } from '../model/apiProfilesInviteGet400Response';
import { ApiProfilesIsCompanyGet200Response } from '../model/apiProfilesIsCompanyGet200Response';
import { ApiProfilesNewPost200Response } from '../model/apiProfilesNewPost200Response';
import { ApiProfilesNewPost401Response } from '../model/apiProfilesNewPost401Response';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'http://localhost';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum ProfilesApiApiKeys {
}

export class ProfilesApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: ProfilesApiApiKeys, value: string) {
        (this.authentications as any)[ProfilesApiApiKeys[key]].apiKey = value;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * Given the profile ID and the authentication token, returns the profile information.
     * @summary Retrieve profile information
     * @param token Session token for authentication
     * @param profileId ID of the profile to retrieve
     */
    public async apiProfilesGetGet (token: string, profileId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ApiProfilesGetGet200Response;  }> {
        const localVarPath = this.basePath + '/api/profiles/get';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json', 'text/plain'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'token' is not null or undefined
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling apiProfilesGetGet.');
        }

        // verify required parameter 'profileId' is not null or undefined
        if (profileId === null || profileId === undefined) {
            throw new Error('Required parameter profileId was null or undefined when calling apiProfilesGetGet.');
        }

        if (token !== undefined) {
            localVarQueryParameters['token'] = ObjectSerializer.serialize(token, "string");
        }

        if (profileId !== undefined) {
            localVarQueryParameters['profileId'] = ObjectSerializer.serialize(profileId, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ApiProfilesGetGet200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ApiProfilesGetGet200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Generates an invitation token for a profile based on the provided session token, duration, and role.
     * @summary Creates an invitation token for a profile
     * @param token Session token to validate the request
     * @param duration Duration for the invitation token in the format \&quot;1h\&quot;, \&quot;1d\&quot;, \&quot;1w\&quot;, or \&quot;1m\&quot;
     * @param role Role for the invitation token (company-manager or company-employee)
     */
    public async apiProfilesInviteGet (token: string, duration: string, role: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ApiProfilesInviteGet200Response;  }> {
        const localVarPath = this.basePath + '/api/profiles/invite';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'token' is not null or undefined
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling apiProfilesInviteGet.');
        }

        // verify required parameter 'duration' is not null or undefined
        if (duration === null || duration === undefined) {
            throw new Error('Required parameter duration was null or undefined when calling apiProfilesInviteGet.');
        }

        // verify required parameter 'role' is not null or undefined
        if (role === null || role === undefined) {
            throw new Error('Required parameter role was null or undefined when calling apiProfilesInviteGet.');
        }

        if (token !== undefined) {
            localVarQueryParameters['token'] = ObjectSerializer.serialize(token, "string");
        }

        if (duration !== undefined) {
            localVarQueryParameters['duration'] = ObjectSerializer.serialize(duration, "string");
        }

        if (role !== undefined) {
            localVarQueryParameters['role'] = ObjectSerializer.serialize(role, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ApiProfilesInviteGet200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ApiProfilesInviteGet200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns whether the user associated with the provided session token or account ID is a company. At least one of the two parameters must be provided.
     * @summary Check if the user is a company
     * @param token The session token of the user
     * @param accountId The account ID of the user
     */
    public async apiProfilesIsCompanyGet (token?: string, accountId?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ApiProfilesIsCompanyGet200Response;  }> {
        const localVarPath = this.basePath + '/api/profiles/isCompany';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        if (token !== undefined) {
            localVarQueryParameters['token'] = ObjectSerializer.serialize(token, "string");
        }

        if (accountId !== undefined) {
            localVarQueryParameters['accountId'] = ObjectSerializer.serialize(accountId, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ApiProfilesIsCompanyGet200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ApiProfilesIsCompanyGet200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Endpoint to modify user profile details.
     * @summary Modify user profile
     * @param sessionToken Session token for authentication.
     * @param name User\\\&#39;s first name.
     * @param surname User\\\&#39;s surname.
     * @param country User\\\&#39;s country.
     * @param region User\\\&#39;s region.
     * @param city User\\\&#39;s city.
     * @param postalCode User\\\&#39;s postal code.
     * @param street User\\\&#39;s street.
     * @param address User\\\&#39;s address.
     * @param bio User\\\&#39;s bio.
     * @param sector User\\\&#39;s sector. Multiple sectors can be separated by commas.
     * @param website User\\\&#39;s website.
     */
    public async apiProfilesModifyPost (sessionToken?: string, name?: string, surname?: string, country?: string, region?: string, city?: string, postalCode?: string, street?: string, address?: string, bio?: string, sector?: string, website?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/api/profiles/modify';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (sessionToken !== undefined) {
            localVarFormParams['sessionToken'] = ObjectSerializer.serialize(sessionToken, "string");
        }

        if (name !== undefined) {
            localVarFormParams['name'] = ObjectSerializer.serialize(name, "string");
        }

        if (surname !== undefined) {
            localVarFormParams['surname'] = ObjectSerializer.serialize(surname, "string");
        }

        if (country !== undefined) {
            localVarFormParams['country'] = ObjectSerializer.serialize(country, "string");
        }

        if (region !== undefined) {
            localVarFormParams['region'] = ObjectSerializer.serialize(region, "string");
        }

        if (city !== undefined) {
            localVarFormParams['city'] = ObjectSerializer.serialize(city, "string");
        }

        if (postalCode !== undefined) {
            localVarFormParams['postalCode'] = ObjectSerializer.serialize(postalCode, "string");
        }

        if (street !== undefined) {
            localVarFormParams['street'] = ObjectSerializer.serialize(street, "string");
        }

        if (address !== undefined) {
            localVarFormParams['address'] = ObjectSerializer.serialize(address, "string");
        }

        if (bio !== undefined) {
            localVarFormParams['bio'] = ObjectSerializer.serialize(bio, "string");
        }

        if (sector !== undefined) {
            localVarFormParams['sector'] = ObjectSerializer.serialize(sector, "string");
        }

        if (website !== undefined) {
            localVarFormParams['website'] = ObjectSerializer.serialize(website, "string");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Create a new profile and link it to the user. The profile can be a company or a person
     * @summary Create a new profile and link it to the user
     * @param sessionToken The authentication token
     * @param isCompany True if the profile is a company, false if it\\\&#39;s a person
     * @param name The name of the profile
     * @param surname The surname of the profile
     * @param country The country where the user/company is located
     * @param region The region where the user/company is located
     * @param city The city where the user/company is located
     * @param postalCode The postal code where the user/company is located
     * @param street The street where the user/company is located
     * @param address The full address where the user/company is located
     * @param birthDate The birth date of the user
     * @param bio A short biography of the user/company
     * @param identifier The fiscal code or P.iva of the user/company
     * @param sector The sector in which the user/company operates
     * @param website The website of the user/company
     */
    public async apiProfilesNewPost (sessionToken?: string, isCompany?: boolean, name?: string, surname?: string, country?: string, region?: string, city?: string, postalCode?: string, street?: string, address?: string, birthDate?: string, bio?: string, identifier?: string, sector?: string, website?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ApiProfilesNewPost200Response;  }> {
        const localVarPath = this.basePath + '/api/profiles/new';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (sessionToken !== undefined) {
            localVarFormParams['sessionToken'] = ObjectSerializer.serialize(sessionToken, "string");
        }

        if (isCompany !== undefined) {
            localVarFormParams['is_company'] = ObjectSerializer.serialize(isCompany, "boolean");
        }

        if (name !== undefined) {
            localVarFormParams['name'] = ObjectSerializer.serialize(name, "string");
        }

        if (surname !== undefined) {
            localVarFormParams['surname'] = ObjectSerializer.serialize(surname, "string");
        }

        if (country !== undefined) {
            localVarFormParams['country'] = ObjectSerializer.serialize(country, "string");
        }

        if (region !== undefined) {
            localVarFormParams['region'] = ObjectSerializer.serialize(region, "string");
        }

        if (city !== undefined) {
            localVarFormParams['city'] = ObjectSerializer.serialize(city, "string");
        }

        if (postalCode !== undefined) {
            localVarFormParams['postalCode'] = ObjectSerializer.serialize(postalCode, "string");
        }

        if (street !== undefined) {
            localVarFormParams['street'] = ObjectSerializer.serialize(street, "string");
        }

        if (address !== undefined) {
            localVarFormParams['address'] = ObjectSerializer.serialize(address, "string");
        }

        if (birthDate !== undefined) {
            localVarFormParams['birthDate'] = ObjectSerializer.serialize(birthDate, "string");
        }

        if (bio !== undefined) {
            localVarFormParams['bio'] = ObjectSerializer.serialize(bio, "string");
        }

        if (identifier !== undefined) {
            localVarFormParams['identifier'] = ObjectSerializer.serialize(identifier, "string");
        }

        if (sector !== undefined) {
            localVarFormParams['sector'] = ObjectSerializer.serialize(sector, "string");
        }

        if (website !== undefined) {
            localVarFormParams['website'] = ObjectSerializer.serialize(website, "string");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ApiProfilesNewPost200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ApiProfilesNewPost200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
