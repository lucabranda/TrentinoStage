/**
 * Trentino Stage API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';

import { HttpError, RequestFile } from './apis';
import { loadEnvConfig } from '@next/env'

const projectDir = process.cwd()
loadEnvConfig(projectDir)

let defaultBasePath = process.env.BASE_PATH!;

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum ApplicationsApiApiKeys {
}

export class ApplicationsApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: ApplicationsApiApiKeys, value: string) {
        (this.authentications as any)[ApplicationsApiApiKeys[key]].apiKey = value;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * Endpoint to create a new application with the provided details.
     * @summary Create a new application
     * @param token Session token for authentication
     * @param title Title of the application
     * @param description Description of the application
     * @param sector Sector of the application
     * @param country Country of the application
     * @param region Region of the application
     * @param city City of the application
     * @param weeklyHours Weekly hours for the application
     */
    public async apiApplicationsCreatePost (token: string, title: string, description: string, sector: string, country: string, region: string, city: string, weeklyHours: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/api/applications/create';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'token' is not null or undefined
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling apiApplicationsCreatePost.');
        }

        // verify required parameter 'title' is not null or undefined
        if (title === null || title === undefined) {
            throw new Error('Required parameter title was null or undefined when calling apiApplicationsCreatePost.');
        }

        // verify required parameter 'description' is not null or undefined
        if (description === null || description === undefined) {
            throw new Error('Required parameter description was null or undefined when calling apiApplicationsCreatePost.');
        }

        // verify required parameter 'sector' is not null or undefined
        if (sector === null || sector === undefined) {
            throw new Error('Required parameter sector was null or undefined when calling apiApplicationsCreatePost.');
        }

        // verify required parameter 'country' is not null or undefined
        if (country === null || country === undefined) {
            throw new Error('Required parameter country was null or undefined when calling apiApplicationsCreatePost.');
        }

        // verify required parameter 'region' is not null or undefined
        if (region === null || region === undefined) {
            throw new Error('Required parameter region was null or undefined when calling apiApplicationsCreatePost.');
        }

        // verify required parameter 'city' is not null or undefined
        if (city === null || city === undefined) {
            throw new Error('Required parameter city was null or undefined when calling apiApplicationsCreatePost.');
        }

        // verify required parameter 'weeklyHours' is not null or undefined
        if (weeklyHours === null || weeklyHours === undefined) {
            throw new Error('Required parameter weeklyHours was null or undefined when calling apiApplicationsCreatePost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (token !== undefined) {
            localVarFormParams['token'] = ObjectSerializer.serialize(token, "string");
        }

        if (title !== undefined) {
            localVarFormParams['title'] = ObjectSerializer.serialize(title, "string");
        }

        if (description !== undefined) {
            localVarFormParams['description'] = ObjectSerializer.serialize(description, "string");
        }

        if (sector !== undefined) {
            localVarFormParams['sector'] = ObjectSerializer.serialize(sector, "string");
        }

        if (country !== undefined) {
            localVarFormParams['country'] = ObjectSerializer.serialize(country, "string");
        }

        if (region !== undefined) {
            localVarFormParams['region'] = ObjectSerializer.serialize(region, "string");
        }

        if (city !== undefined) {
            localVarFormParams['city'] = ObjectSerializer.serialize(city, "string");
        }

        if (weeklyHours !== undefined) {
            localVarFormParams['weekly_hours'] = ObjectSerializer.serialize(weeklyHours, "number");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
